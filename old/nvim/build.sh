#!/bin/bash
cd "$(dirname ${BASH_SOURCE[0]})"
pwd=$PWD

action=$1
if [ -z "$action" ]; then
    printf "usage: ./build.sh release|reset|upgrade\n\n"
    printf "%-15s %s\n" "release" "for each plugin, gather current git hash and write to file"
    printf "%-15s %s\n" "reset"   "for each plugin, reset the hash in file to nil"
    printf "%-15s %s\n" "update"  "update nvchad. download a given version of nvchad as specified in chadversion.lua"
    printf "%-15s %s\n" "upgrade" "upgrade nvchad. download latest version of nvchad and update chadversion.lua"
    exit 1
fi

CHAD_URL=https://github.com/NvChad/NvChad.git
CHAD_PLUGINS=(base46 extensions nvim-colorizer.lua)
CHAD_VERSION=$pwd/lua/custom/chadversion.lua
TMP_NVIM_DIR=/tmp/tmp_nvim/nvim

if [ "$action" == "update" ]; then
    chad_git_hash=$(cat $CHAD_VERSION | grep -E NvChad | awk '{print $3}' | xargs)
    rm -rf $TMP_NVIM_DIR
    git clone $CHAD_URL $TMP_NVIM_DIR/NvChad
    cd $TMP_NVIM_DIR/NvChad && git checkout $chad_git_hash

    rm -rf $pwd/init.lua $pwd/lua/core $pwd/lua/plugins
    cp -R init.lua lua $pwd/
    chad_commit_message=$(git --no-pager show -s --format='%h: %s (%an committed %cr)')
    echo nvchad version: $chad_git_hash
    echo $chad_commit_message
    exit 0
    
elif [ "$action" == "upgrade" ]; then
    echo "-- This file is generated by build.sh" > $CHAD_VERSION
    echo "local V = {}" >> $CHAD_VERSION
    printf "\n" >> $CHAD_VERSION

    rm -rf $TMP_NVIM_DIR

    printf "\n------------------- upgrade nvchad -------------------\n"
    git clone $CHAD_URL $TMP_NVIM_DIR/NvChad
    cd $TMP_NVIM_DIR/NvChad

    rm -rf $pwd/init.lua $pwd/lua/core $pwd/lua/plugins
    cp -R init.lua lua $pwd/
    chad_git_hash=$(git rev-parse HEAD)
    chad_commit_message=$(git --no-pager show -s --format='%h: %s (%an committed %cr)')
    printf "%-30s = '%s'\n" "V.NvChad" "$chad_git_hash" >> $CHAD_VERSION
    echo upgraded nvchad to $chad_git_hash
    echo $chad_commit_message

    printf "\n---------------- upgrade chad plugins ----------------\n"
    for plugin in "${CHAD_PLUGINS[@]}"; do
        cd $TMP_NVIM_DIR
        plugin_url=https://github.com/NvChad/${plugin}.git
        git clone $plugin_url $TMP_NVIM_DIR/$plugin
        cd $TMP_NVIM_DIR/$plugin
        plugin_git_hash=$(git rev-parse HEAD)
        plugin_commit_message=$(git --no-pager show -s --format='%h: %s (%an committed %cr)')
        printf "%-30s = '%s'\n" "V.${plugin}" "$plugin_git_hash" >> $CHAD_VERSION
        echo upgraded $plugin to $plugin_git_hash
        echo $plugin_commit_message
        echo
    done
    printf "\nreturn V\n" >> $CHAD_VERSION
    exit 0
fi



PLUGINS_DIR=~/.local/share/nvim/site/pack/packer
PLUGINS_VERSIONS=$pwd/lua/custom/plugins/versions.lua

echo "info: output will be redirected to $PLUGINS_VERSIONS"
echo "-- This file is generated by build.sh" > $PLUGINS_VERSIONS
echo "local V = {}" >> $PLUGINS_VERSIONS
echo "local ChadV = require('custom.chadversion')" >> $PLUGINS_VERSIONS

for subdir in $(ls "$PLUGINS_DIR"); do
	if [ -d "$PLUGINS_DIR/$subdir" ]; then
		printf "\n------ packer/$subdir ------\n\n" >> $PLUGINS_VERSIONS
        cd $PLUGINS_DIR/$subdir
        # traverse all plugins under current subdir
        for plugin in $(ls); do
            d=$PLUGINS_DIR/$subdir/$plugin
            cd $d
            
            # plugin name: replace special characters
            plugin=${plugin//-/_}
            plugin=${plugin//./_}

            # skip nvchad plugins
            if [ "$plugin" = "base46" ] || [ "$plugin" = "extensions" ] || [ "$plugin" = "nvim_colorizer_lua" ]; then
                printf "%-30s = %s\n" "V.${plugin}" "ChadV.${plugin}" >> $PLUGINS_VERSIONS
                continue
            fi

            git_hash=""
            if [ "$action" == "release" ]; then
                git_hash=$(git rev-parse HEAD)
                printf "%-30s = '%s'\n" "V.${plugin}" "$git_hash" >> $PLUGINS_VERSIONS
            elif [ "$action" == "reset" ]; then
                # set git_hash to nil so packer will pull latest changes of plugins
                printf "%-30s = nil\n" "V.${plugin}" >> $PLUGINS_VERSIONS
            fi
        done
	fi
done

printf "\nreturn V\n" >> $PLUGINS_VERSIONS
